const URL = "https://etu-go.antodu72210.workers.dev/";

/* ==========================
  FONCTIONS COOKIES
========================== */

// Supprime tous les cookies
function clearCookies() {
  document.cookie.split("; ").forEach((cookie) => {
    let [key] = cookie.split("=");
    document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
  });
  console.log("‚úÖ Tous les cookies ont √©t√© supprim√©s !");
}

// Cr√©e un cookie
function setCookie(name, value, days = 36500) {
  const expires = new Date();
  expires.setDate(expires.getDate() + days);
  if (name == "name") value = value.replace(/\s+/g, "_");
  document.cookie = `${name}=${encodeURIComponent(value)}; expires=${expires.toUTCString()}; path=/;`;
}

// R√©cup√®re un cookie sp√©cifique
function getCookie(name) {
  const cookies = document.cookie.split("; ");
  for (let cookie of cookies) {
    let [key, value] = cookie.split("=");
    if (key === name) return decodeURIComponent(value);
  }
  return null;
}

// R√©cup√®re tous les cookies sous forme d‚Äôobjet
function getProfilInfo() {
  let cookieDict = {};
  document.cookie.split("; ").forEach((cookie) => {
    let [key, value] = cookie.split("=");
    cookieDict[key] = decodeURIComponent(value);
  });
  return cookieDict;
}

/* ==========================
  FONCTIONS UTILISATEUR
========================== */

// üìå Envoie les infos utilisateur (cr√©ation / mise √† jour)
async function newUser() {
  try {
    let cookiesData = getProfilInfo();
    const requiredFields = ["name", "mdp", "nv_etude", "type_etude", "type_eval", "work_time"];

    for (let field of requiredFields) {
      if (!cookiesData[field]) throw new Error(`‚ùå Champ manquant : ${field}`);
    }

    const response = await fetch(URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(cookiesData),
    });

    // V√©rifier si le serveur renvoie une erreur sp√©cifique pour un conflit
    if (response.status === 409) {
      throw new Error("‚ùå Le pseudonyme est d√©j√† pris. Veuillez choisir un autre pseudonyme.");
    }

    if (!response.ok) throw new Error(`‚ùå Erreur HTTP: ${response.status}`);

    const data = await response.json();
    console.log("‚úÖ Donn√©es utilisateur envoy√©es :", data);
    return data;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'envoi des donn√©es :", error);
    alert(error.message);  // Afficher l'erreur dans une alerte
  }
}

// üìå R√©cup√®re les infos utilisateur √† partir du pseudonyme et du mot de passe
async function getUser() {
  try {
    let name = getCookie("name");
    let mdp = getCookie("mdp");

    if (!name || !mdp) throw new Error("‚ùå Pseudonyme ou mot de passe introuvable dans les cookies.");

    let pseudoKey = name.replace(/\s+/g, "_");

    const response = await fetch(`${URL}${pseudoKey}/${encodeURIComponent(mdp)}`, {
      method: "GET",
    });

    if (!response.ok) throw new Error(`‚ùå Erreur HTTP: ${response.status}`);

    const data = await response.json();
    console.log("‚úÖ Donn√©es utilisateur r√©cup√©r√©es :", data);
    return data;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es :", error);
  }
}

/* ==========================
  TEST
========================== */

// üìå Test : Cr√©e des donn√©es, les envoie, puis tente de les r√©cup√©rer
async function testUser() {
  console.log("üöÄ Test en cours...");

  clearCookies();

  // G√©n√©ration de donn√©es factices
  const testData = {
    name: "kevin", // G√©n√®re un pseudo unique
    mdp: "mot_de_passe",
    nv_etude: "Master",
    type_etude: "Informatique",
    type_eval: "Projet",
    work_time: "20h/semaine",
  };

  // Enregistrement des donn√©es dans les cookies
  for (let key in testData) {
    setCookie(key, testData[key]);
  }

  console.log("üìå Donn√©es de test enregistr√©es dans les cookies :", getProfilInfo());

  await newUser(); // Envoie les donn√©es utilisateur

  setTimeout(async () => {
    await getUser(); // R√©cup√®re les donn√©es utilisateur
  }, 1000); // Attente de 1 seconde pour laisser le temps au serveur d'enregistrer
}

/* ==========================
  BOUTONS DE TEST
========================== */

// Bouton "Test" (cr√©e des donn√©es, les envoie puis les r√©cup√®re)
/*let btn3 = document.createElement("button");
btn3.id = "test3";
btn3.textContent = "Tester";
document.body.appendChild(btn3);
btn3.addEventListener("click", testUser);*/