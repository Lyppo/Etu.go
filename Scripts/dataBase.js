const API_URL = "https://etu-go.antodu72210.workers.dev";

// Fonction pour r√©cup√©rer un utilisateur
async function getUser(userId) {
    const response = await fetch(`${API_URL}/user/${userId}`);
    if (response.ok) {
        return await response.json();
    } else {
        throw new Error("Utilisateur non trouv√©");
    }
}

// Fonction pour cr√©er un nouvel utilisateur
async function newUser(name, email, mdp) {
    const response = await fetch(`${API_URL}/register`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, email, mdp })
    });
    return await response.json();
}

// Fonction pour modifier le nom d'un utilisateur
async function newName(userId, name) {
    const response = await fetch(`${API_URL}/edit/name/${userId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name })
    });
    return response.text();
}

// Fonction pour ajouter une formation √† un utilisateur
async function newFormation(userId, formation) {
    const response = await fetch(`${API_URL}/edit/formation/${userId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ formation })
    });
    return response.text();
}

// Fonction pour ajouter un cours
async function addCourse(userId, course) {
    const response = await fetch(`${API_URL}/edit/course/${userId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ course })
    });
    return response.text();
}

// Fonction pour supprimer un cours
async function deleteCourse(userId, course) {
    const response = await fetch(`${API_URL}/delete/course/${userId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ course })
    });
    return response.text();
}

// Fonction pour mettre √† jour un utilisateur (donn√©es g√©n√©rales)
async function updateUser(userId, newData) {
    const response = await fetch(`${API_URL}/edit/${userId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newData)
    });
    return response.text();
}

// Fonction pour supprimer un utilisateur
async function deleteUser(userId) {
    const response = await fetch(`${API_URL}/delete/${userId}`, {
        method: "DELETE"
    });
    return response.text();
}

// Fonction pour connecter un utilisateur
async function login(userName, mdp) {
    const response = await fetch(`${API_URL}/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userName, mdp })
    });

    if (response.ok) {
        return "Connexion r√©ussie !";
    } else {
        throw new Error("Nom d'utilisateur ou mot de passe incorrect");
    }
}

async function testAPI() {
  console.log("üîÑ D√©but des tests...");

  try {
      // 1Ô∏è‚É£ Cr√©ation d'un utilisateur
      console.log("üü¢ Test: Cr√©ation d'un utilisateur...");
      const userResponse = await newUser("anto", "test@example.com", "password123");
      console.log("‚úÖ Utilisateur cr√©√©:", userResponse);
      
      // R√©cup√©rer l'ID g√©n√©r√©
      const userId = userResponse.id;
      if (!userId) throw new Error("‚ùå Erreur: Aucun ID retourn√©");

      // 2Ô∏è‚É£ R√©cup√©ration de l'utilisateur
      console.log("üü¢ Test: R√©cup√©ration de l'utilisateur...");
      const userData = await getUser(userId);
      console.log("‚úÖ Utilisateur r√©cup√©r√©:", userData);

      // 3Ô∏è‚É£ Modification du nom
      console.log("üü¢ Test: Modification du nom...");
      const nameUpdate = await newName(userId, "Updated Name");
      console.log("‚úÖ Nom mis √† jour:", nameUpdate);

      // 4Ô∏è‚É£ Ajout d'une formation
      console.log("üü¢ Test: Ajout d'une formation...");
      const formationUpdate = await newFormation(userId, "D√©veloppement Web");
      console.log("‚úÖ Formation ajout√©e:", formationUpdate);

      // 5Ô∏è‚É£ Ajout d'un cours
      console.log("üü¢ Test: Ajout d'un cours...");
      const courseUpdate = await addCourse(userId, "JavaScript Avanc√©");
      console.log("‚úÖ Cours ajout√©:", courseUpdate);

      // 6Ô∏è‚É£ Suppression d'un cours
      console.log("üü¢ Test: Suppression d'un cours...");
      const deleteCourseResponse = await deleteCourse(userId, "JavaScript Avanc√©");
      console.log("‚úÖ Cours supprim√©:", deleteCourseResponse);

      // 7Ô∏è‚É£ Mise √† jour compl√®te de l'utilisateur
      console.log("üü¢ Test: Mise √† jour compl√®te...");
      const updateResponse = await updateUser(userId, { name: "Final Name", email: "final@example.com" });
      console.log("‚úÖ Utilisateur mis √† jour:", updateResponse);

      // 8Ô∏è‚É£ Connexion avec le bon mot de passe
      console.log("üü¢ Test: Connexion...");
      const loginSuccess = await login("anto", "password123");
      console.log("‚úÖ Connexion r√©ussie:", loginSuccess);

  } catch (error) {
      console.error("‚ùå Erreur lors des tests:", error);
  }
}

// Ex√©cuter tous les tests
testAPI();